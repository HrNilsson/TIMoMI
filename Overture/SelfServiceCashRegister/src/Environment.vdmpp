class Environment

instance variables
  scanner: BarcodeScanner;
  screen: TouchScreen;
  cabTerm: CoinAndBanknoteTerminal;

operations
	public Environment:() ==> Environment
	Environment() == 
		(
			scanner := CR`scanner;
			screen := CR`screen;
			cabTerm := CR`cabTerm;
			
		);
		
	public Run:() ==> ()
	Run() ==
	(
	-- Standard run with cash:
		screen.StartPayment();
		
		scanner.ScanBarcode(2);
		screen.AddMultiple(3); -- Add three products with barcode 2
		scanner.ScanBarcode(4);
		scanner.ScanBarcode(7);
		scanner.ScanBarcode(11); --Invalid barcode
		
		cabTerm.PutInMoney(100); -- not enough
		screen.PayCash();
		cabTerm.PutInMoney(200);
		screen.PayCash();
	
	-- Cancel payment run:	
		screen.StartPayment();
		scanner.ScanBarcode(4);
		scanner.ScanBarcode(7);
		screen.CancelPayment();	
	
	-- Standard run with credit card:
		screen.StartPayment();
		scanner.ScanBarcode(1);
		scanner.ScanBarcode(5);
		scanner.ScanBarcode(6);
		scanner.ScanBarcode(8);
		scanner.ScanBarcode(9);
		scanner.ScanBarcode(10);
		
		screen.PayCredit();
	)

traces

PayWithCredit: 
	let myBarcodes in set dom CR`cashRegister.databaseProducts
	in
		let myBarcodes2 in set dom CR`cashRegister.databaseProducts
		in
		(
			screen.StartPayment();
			scanner.ScanBarcode(myBarcodes){1};
			scanner.ScanBarcode(myBarcodes2){1,3};
			screen.PayCredit()
		);


PayWithCash: 
	let myBarcodes in set dom CR`cashRegister.databaseProducts
	in
		let myBarcodes2 in set dom CR`cashRegister.databaseProducts
		in
		(
			screen.StartPayment();
			scanner.ScanBarcode(myBarcodes){1};
			scanner.ScanBarcode(myBarcodes2){1,3};
			cabTerm.PutInMoney(500);
			screen.PayCash()
		);
							
AddingAndEmptyingBasket: 
	let myBarcodes in set dom CR`cashRegister.databaseProducts
	in
		let myBarcodes2 in set dom CR`cashRegister.databaseProducts
		in
			let mult in set {1,...,4}
			in
			(
				screen.StartPayment();
				scanner.ScanBarcode(myBarcodes){1};
				screen.AddMultiple(mult);
				scanner.ScanBarcode(myBarcodes2){1,3};
				screen.CancelPayment()
			);
			
preconditionFail:
	let mult = 1
		in
		(
			screen.StartPayment();
			screen.AddMultiple(mult)
		);

end Environment
